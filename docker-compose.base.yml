# ===== EXTENSION FIELDS =====
x-common-service: &common-service
  restart: unless-stopped
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

# ===== SERVICES =====
services:
  postgres:
    <<: *common-service
    image: postgres:16-alpine
    container_name: monitoring-postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s

  redis:
    <<: *common-service
    image: redis:7-alpine
    container_name: monitoring-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s

  backend:
    <<: *common-service
    build:
      context: ./backend
    container_name: monitoring-backend
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_URL: redis://redis:6379
    networks:
      - backend-network
      - frontend-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health')"]

  frontend:
    <<: *common-service
    build:
      context: ./frontend
    container_name: monitoring-frontend
    environment:
      REACT_APP_API_URL: /api
    networks:
      - frontend-network
    depends_on:
      - backend

  nginx:
    <<: *common-service
    build:
      context: ./nginx
    container_name: monitoring-nginx
    ports:
      - "${NGINX_PORT:-8080}:80"
    networks:
      - frontend-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/nginx-health"]

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: