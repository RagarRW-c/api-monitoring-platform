version: '3.8'

services:
  #postgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: monitoring-postgres
    environment:
      POSTGRES_USER: ${DB_NUSER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-monitoring}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrpoint-initdb.d/init.sql
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: monitorng-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: monitoring-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-monitoring}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_URL: redis://redis:6379
    ports:
      - "3000:3000"
      - "9229:9229"  # Debugger port
    volumes:
      - ./backend/src:/app/src
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    networks:
      - backend-network
      - frontend-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: monitoring-frontend
    environment:
      - REACT_APP_API_URL=/api
      - CHOKIDAR_USEPOLLING=true  # Hot-reload fix dla niektórych systemów
      - WDS_SOCKET_PORT=0  # WebSocket fix
    ports:
      - "3001:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    networks:
      - frontend-network
    depends_on:
      - backend
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: monitoring-nginx
    ports:
      - "8080:80"
      - "8081:8080"  # Health check port
    networks:
      - frontend-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/nginx-health"]
      interval: 30s
      timeout: 3s
      retries: 3

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_node_modules:
  frontend_node_modules:
